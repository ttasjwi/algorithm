def solution(n):
    result = []

    chars = ['1', '2', '4']

    # 1 -> '1',
    # 2 -> '2',
    # 3 -> '4'
    # 4 -> '11',
    # 삼진법 관점에서 직관적으로 생각하면 n % 3 == 0 이면 자리 올림이 발생하여 '10'이 되는게 맞음
    # 그러나 여기서는 3의배수 +1 단위로 자리올림이 발생하는 구조가 발생함.
    # n이 0보다 큰 동안, 전 단계에서 매번 1을 빼주고
    # 1 뺀 값 기준 나머저 0 -> '1'
    # 1 뺀 값 기준 나머지 1 -> '2'
    # 1 뺀 값 기준 나머지 2 -> '4'
    # 이렇게 처리해야 순환구조에 맞게 자리올림을 할 수 있음
    while n > 0:
        n, r = divmod(n - 1, 3)
        result.append(chars[r])
    answer = ''.join(result[::-1]) # 배열을 역순으로 뒤집은 문자열이 구하고자 하는 문자
    return answer
